{"version":3,"file":"component---src-templates-project-author-js-cfa1b3342abbc8d1c020.js","mappings":"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","sources":["webpack://wordpress-starter/./src/components/layout.js","webpack://wordpress-starter/./src/components/mainMenu.js","webpack://wordpress-starter/./src/components/category/categoryItem.js","webpack://wordpress-starter/./src/components/category/categoryItems.js","webpack://wordpress-starter/./src/components/tag/tagItem.js","webpack://wordpress-starter/./src/components/tag/tagItems.js","webpack://wordpress-starter/./src/components/searchInput.js","webpack://wordpress-starter/./src/components/projectItems.js","webpack://wordpress-starter/./src/queries/queries.js","webpack://wordpress-starter/./src/templates/project-author.js"],"sourcesContent":["/**\n* Layout component that queries for data\n* with Gatsby's useStaticQuery component\n*\n* See: https://www.gatsbyjs.org/docs/use-static-query/\n*/\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\n\n\nimport \"../styles/main.scss\";\n\nconst Layout = ({ children }) => {\n\n    return (\n        <div>\n            <main>\n                <div className=\"max-container\">\n                    {children}\n                </div>\n            </main>\n        </div>\n    )\n}\n\nLayout.propTypes = {\n    children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from 'react';\nimport { useStaticQuery, graphql, Link } from \"gatsby\";\n\nconst MainMenu = () => {\n\n    const data = useStaticQuery(graphql\n        `\n        {\n            allWpMenuItem {\n                edges {\n                    node {\n                        id\n                        url\n                        label\n                    }\n                }\n            }\n        }\n\n        `\n    )\n\n\n    return (\n        <nav className=\"menu--sticky\">\n            <ul>\n                {data.allWpMenuItem.edges.map(menuItem => (\n                    <li key={menuItem.node.id}>\n                        <Link to={menuItem.node.url}>{menuItem.node.label}</Link>\n                    </li>\n                ))}\n            </ul>\n        </nav>\n    )\n}\n\nexport default MainMenu;\n","import React from 'react';\n\nconst CategoryItem = props => {\n\n    return(\n    <div>\n        <input type=\"checkbox\" id={props.id} name={props.name} value={props.name} onChange={props.handleChange.bind(this)}/>\n        <label htmlFor={props.name}>{props.name}</label>\n    </div>\n)};\n\nexport default CategoryItem;\n","import React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport CategoryItem from './categoryItem';\n\nconst CategoryItems = props => {\n\n    const data = useStaticQuery(graphql`\n        {\n            allWpCategory {\n                edges {\n                    node {\n                        name\n                        id\n                    }\n                }\n            }\n        }\n        `\n    );\n\n    return (\n        <div>\n            {data.allWpCategory.edges.map(category => (\n                <CategoryItem\n                    name= {category.node.name}\n                    id={category.node.id}\n                    key={category.node.id}\n                    handleChange={props.handleChange}\n                    />\n            ))}\n        </div>\n    )\n}\n\nexport default CategoryItems;\n","import React from 'react';\n\nconst TagItem = props => {\n\n    return(\n    <div>\n        <input type=\"checkbox\" id={props.id} name={props.name} value={props.name} onChange={props.handleChange.bind(this)}/>\n        <label htmlFor={props.name}>{props.name}</label>\n    </div>\n)};\n\nexport default TagItem;\n","import React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport TagItem from './tagItem';\n\nconst TagItems = props => {\n\n    const data = useStaticQuery(graphql`\n        {\n            allWpTag {\n                edges {\n                    node {\n                        name\n                        id\n                    }\n                }\n            }\n        }\n        `\n    );\n\n    return (\n        <div>\n            {data.allWpTag.edges.map(tag => (\n                <TagItem\n                    name= {tag.node.name}\n                    id={tag.node.id}\n                    key={tag.node.id}\n                    handleChange={props.handleChange}\n                    />\n            ))}\n        </div>\n    )\n}\n\nexport default TagItems;\n","import React from 'react';\nimport CategoryItems from './category/categoryItems';\nimport TagItems from './tag/tagItems';\n\nconst SearchInput = props => (\n\n    <form onSubmit={props.handleSubmit.bind(this)}>\n        <div style={{display:'flex'}}>\n            <CategoryItems handleChange={props.handleChangeCategory} />\n\n            <TagItems handleChange={props.handleChangeTag} />\n        </div>\n        <input type=\"submit\" value=\"Submit\" />\n    </form>\n\n\n)\n\nexport default SearchInput;\n\n\n/* <label>\nCategory:\n<input type=\"text\" value={props.value} onChange={props.handleChange.bind(this)} />\n</label>\n<input type=\"submit\" value=\"Submit\" /> */\n","import React, { useState, useEffect } from 'react';\nimport { useStaticQuery, graphql, Link } from \"gatsby\";\nimport SearchInput from './searchInput';\nimport {\n    getAllProjectByCategory,\n    getAllProjects,\n    getAllProjectByCategoryTag,\n    getAllProjectByTag } from '../queries/queries';\n\n\nconst ProjectsItems = (props) => {\n\n    const [projects, setProject] = useState(props.data);\n    const [categories, setCategories] = useState([]);\n    const [tags, setTags] = useState([]);\n\n\n    const handleChangeCategory = (event) => {\n        if(event.target.checked) setCategories(oldArray => [...oldArray, event.target.value]);\n        else setCategories(categories.filter(item => item !== event.target.value))\n    }\n\n    const handleChangeTag = (event) => {\n        if(event.target.checked) setTags(oldArray => [...oldArray, event.target.value]);\n        else setTags(tags.filter(item => item !== event.target.value))\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        onSearch(categories, tags);\n    }\n\n\n    const onSearch = (categories, tags) => {\n\n        let query = null;\n\n        if(categories.length > 0 && tags.length > 0) query = getAllProjectByCategoryTag;\n        else if(categories.length > 0 && tags.length <= 0) query = getAllProjectByCategory;\n        else if(categories.length <= 0 && tags.length > 0) query = getAllProjectByTag;\n        else query = getAllProjects;\n\n\n        fetch(`http://localhost:8000/___graphql`,\n            {\n                method: 'POST',\n                headers : {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                },\n                body: JSON.stringify({\n                    query,\n                    variables: {\n                        categoryName: categories,\n                        tagName: tags\n                    }\n                })\n\n            })\n            .then(response => response.json()) // parse JSON from request\n            .then(resultData => {\n                setProject(resultData.data)\n            })\n\n        }\n\n        return (\n            <div>\n                <SearchInput value={filter} handleChangeCategory={handleChangeCategory} handleChangeTag={handleChangeTag} handleSubmit={handleSubmit}/>\n                <div className=\"row thumbnails\">\n                    {projects.allWpProject.edges.map(project => (\n                        <div key={project.node.id} className=\"col-xs-6 col-md-4\">\n                            <Link to={`/project/${project.node.slug}`}>\n                                <div className=\"thumbnail\">\n                                    <div className=\"thumbnail__img\">\n                                        <img src={project.node.featuredImage.node.sourceUrl} alt=\"Thumbnail\"/>\n                                    </div>\n                                    <div className=\"thumbnail__title\">\n\n                                        <b>{project.node.title}</b><br />\n                                        <div dangerouslySetInnerHTML={{__html : project.node.excerpt}}/>\n\n                                    </div>\n                                </div>\n                            </Link>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        )\n    }\n\n\n\n    export default ProjectsItems;\n","export const getAllProjectByCategory = `\nquery MyQuery($categoryName: [String]!) {\n    allWpProject(filter: {categories: {nodes: {elemMatch: {name: {in: $categoryName}}}}}) {\n        edges {\n            node {\n                id\n                title\n                slug\n                excerpt\n                featuredImage {\n                    node {\n                        sourceUrl\n                    }\n                }\n            }\n        }\n    }\n}`\n\nexport const getAllProjectByTag = `\nquery MyQuery($tagName: [String]!) {\n    allWpProject(filter: {tags: {nodes: {elemMatch: {name: {in: $tagName}}}}}) {\n        edges {\n            node {\n                id\n                title\n                slug\n                excerpt\n                featuredImage {\n                    node {\n                        sourceUrl\n                    }\n                }\n            }\n        }\n    }\n}`\n\nexport const getAllProjectByCategoryTag = `\nquery MyQuery($categoryName: [String]!, $tagName: [String]!) {\n    allWpProject(\n    filter: {\n        categories: {nodes: {elemMatch: {name: {in: $categoryName}}}},\n        tags: {nodes: {elemMatch: {name: {in: $tagName}}}}\n    }\n  ) {\n        edges {\n            node {\n                id\n                title\n                slug\n                excerpt\n                featuredImage {\n                    node {\n                        sourceUrl\n                    }\n                }\n            }\n        }\n    }\n}`\n\nexport const getAllProjects = `\n{\n    allWpProject\n     {\n        edges {\n            node {\n                id\n                title\n                slug\n                excerpt\n                featuredImage {\n                    node {\n                        sourceUrl\n                    }\n                }\n            }\n        }\n    }\n}\n\n`\n","import React from 'react';\n\nimport Layout from '../components/layout';\nimport MainMenu from '../components/mainMenu';\nimport ProjectItems from '../components/projectItems';\n\n\nimport { graphql } from 'gatsby';\n\n\nexport const query = graphql`\n\nquery getProjects($title: String!) {\n    allWpProject(filter: {author: {eq: $title}}) {\n        edges {\n            node {\n                id\n                title\n                excerpt\n                slug\n                featuredImage {\n                    node {\n                        sourceUrl\n                    }\n                }\n            }\n        }\n    }\n}\n\n\n`;\n\n\nconst Author = ({data, pageContext}) => {\n    console.log(pageContext)\n    return (\n        <Layout>\n            <MainMenu />\n                <div className=\"row\">\n                    <div className=\"col-xs-12\">\n                        <h1 dangerouslySetInnerHTML={{__html: pageContext.title}}/>\n                    </div>\n                </div>\n\n\n            <div className=\"row\">\n                <div className=\"col-xs-12 col-md-8\">\n                    <ProjectItems data={data}/>\n                </div>\n                <div className=\"col-xs-12 col-md-3 col-md-offset-1\">\n                    <div className=\"article__sidebar\">\n                        <div className=\"author__image\">\n\n                            <img src={pageContext.authorInfo.photo.sourceUrl} alt={pageContext.title}/>\n\n                        </div>\n                        <div className=\"author__bio\">\n                            <div dangerouslySetInnerHTML={{__html: pageContext.authorInfo.biography}}/>\n                        </div>\n\n                    </div>\n                </div>\n            </div>\n        </Layout>\n    );\n};\n\n\nexport default Author;\n"],"names":["children","className","data","useStaticQuery","allWpMenuItem","edges","map","menuItem","key","node","id","Link","to","url","label","props","type","name","value","onChange","handleChange","bind","htmlFor","allWpCategory","category","allWpTag","tag","onSubmit","handleSubmit","style","display","handleChangeCategory","handleChangeTag","useState","projects","setProject","categories","setCategories","tags","setTags","onSearch","query","length","fetch","method","headers","body","JSON","stringify","variables","categoryName","tagName","then","response","json","resultData","filter","event","target","checked","oldArray","item","preventDefault","allWpProject","project","slug","src","featuredImage","sourceUrl","alt","title","dangerouslySetInnerHTML","__html","excerpt","pageContext","console","log","authorInfo","photo","biography"],"sourceRoot":""}